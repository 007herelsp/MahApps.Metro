using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;

using Humanizer;
using Newtonsoft.Json.Linq;

Console.WriteLine("Convert Material Design Icons to MahApps.Metro PackIconMaterialKind");

public class IconConverter
{
    public void StartConvertion()
    {
        Console.WriteLine("Downloading Material Design icon data...");
        var nameDataPairs = GetNameDataPairs(GetSourceData()).ToList();
        Console.WriteLine("Items: " + nameDataPairs.Count);

        Console.WriteLine("Updating PackIconMaterialKind...");
        var newEnumSource = UpdatePackIconMaterialKind("PackIconMaterialKind.template.cs", nameDataPairs);
        Write(newEnumSource, "PackIconMaterialKind.cs");

        Console.WriteLine("Updating PackIconMaterialDataFactory...");
        var newDataFactorySource = UpdatePackIconMaterialDataFactory("PackIconMaterialDataFactory.template.cs", nameDataPairs);
        Write(newDataFactorySource, "PackIconMaterialDataFactory.cs");

        Console.WriteLine("Done!");
    }

    private string UpdatePackIconMaterialKind(string sourceFile, IEnumerable<Tuple<string, string>> nameDataPairs)
    {
        // line 15
        var allLines = File.ReadAllLines(sourceFile).ToList();
        allLines.InsertRange(15, nameDataPairs.Select(t => string.Format("        {0},", t.Item1)).ToArray());
        return string.Join(Environment.NewLine, allLines);
    }

    private string UpdatePackIconMaterialDataFactory(string sourceFile, IEnumerable<Tuple<string, string>> nameDataPairs)
    {
        // { PackIconMaterialKind.AutoGenerated, "data in here" },
        // line 12
        var allLines = File.ReadAllLines(sourceFile).ToList();
        allLines.InsertRange(12, nameDataPairs.Select(t => string.Format("            {{PackIconMaterialKind.{0}, {1}}},", t.Item1, t.Item2)).ToArray());
        return string.Join(Environment.NewLine, allLines);
    }

    private IEnumerable<Tuple<string, string>> GetNameDataPairs(string sourceData)
    {
        var jObject = JObject.Parse(sourceData);
        return jObject["icons"].Select(t => new Tuple<string, string>(t["name"].ToString().Underscore().Pascalize(), t["data"].ToString()));
    }

    private string GetSourceData()
    {
        var webRequest = WebRequest.CreateDefault(new Uri("https://materialdesignicons.com/api/package/38EF63D0-4744-11E4-B3CF-842B2B6CFE1B"));

        webRequest.Credentials = CredentialCache.DefaultCredentials;
        if (webRequest.Proxy != null)
        {
            webRequest.Proxy.Credentials = CredentialCache.DefaultCredentials;
        }

        using (var sr = new StreamReader(webRequest.GetResponse().GetResponseStream()))
        {
            var iconData = sr.ReadToEnd();
            Console.WriteLine("Got.");
            return iconData;
        }
    }

    private void Write(string content, string filename)
    {
        File.WriteAllText(Path.Combine(@"..\..\MahApps.Metro\Controls", filename), content, Encoding.UTF8);
    }
}

var iconConverter = new IconConverter();
iconConverter.StartConvertion();

Console.WriteLine("...finished");
